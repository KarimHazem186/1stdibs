const [showNav, setShowNav] = useState(true);
const [shouldRenderNav, setShouldRenderNav] = useState(true);
const [lastScrollY, setLastScrollY] = useState(0);

useEffect(() => {
  const handleScroll = () => {
    const currentScrollY = window.scrollY;

    if (currentScrollY > lastScrollY && currentScrollY > 100) {
      setShowNav(false); // scroll down
    } else {
      setShowNav(true); // scroll up
    }

    setLastScrollY(currentScrollY);
  };

  window.addEventListener("scroll", handleScroll);
  return () => window.removeEventListener("scroll", handleScroll);
}, [lastScrollY]);

// Handle mount/unmount with animation
useEffect(() => {
  if (showNav) {
    setShouldRenderNav(true); // mount
  } else {
    // wait for animation to finish before unmounting
    const timeout = setTimeout(() => setShouldRenderNav(false), 300);
    return () => clearTimeout(timeout);
  }
}, [showNav]);


{shouldRenderNav && (
  <div
    className={`
      hidden lg:flex items-center justify-center gap-8 mt-4 relative
      transition-all duration-300 ease-in-out
      ${showNav ? "opacity-100 translate-y-0" : "opacity-0 -translate-y-4"}
    `}
  >
    <nav className="flex gap-8">
      {navigationItem.map(({ label, dropdown }) => (
        <div key={label} className="relative group">
          <button
            className={`text-sm font-medium px-2 py-2 ${
              label === "SALE"
                ? "text-orange-600 font-semibold hover:opacity-70 cursor-pointer"
                : "text-gray-700 hover:text-black hover:opacity-70 cursor-pointer"
            }`}
          >
            {label}
          </button>
          {/* Mega Dropdown */}
          <div className="absolute top-full left-1/2 transform -translate-x-1/2 mt-2 min-w-[900px] bg-white border border-gray-200 shadow-xl z-50 opacity-0 group-hover:opacity-100 pointer-events-none group-hover:pointer-events-auto transition duration-300">
            {dropdown}
          </div>
        </div>
      ))}
    </nav>
  </div>
)}
